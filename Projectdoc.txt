1. Real-Time Chat Application
Use Case: A live chat system is essential for customer support or social messaging apps. These apps need to display messages instantly without having to refresh the page.
Features:
Instant Messaging: Use WebSockets to establish a real-time connection between users.
Typing Indicators: Notify users when someone is typing a message.
Message Delivery & Read Status: Indicate whether a message has been delivered or read in real-time.
Push Notifications: Send real-time notifications for new messages even when the user is offline.
Technologies Used:
WebSockets or Firebase Real-Time Database for real-time communication.
NgRx to manage message states across components.
Angular Service Workers for offline capabilities.
Example:
In a customer service chat, real-time messaging allows the service agent and user to communicate instantly. Push notifications can alert the user if a new message is received when they are not actively using the app.
â€”------------------------------------------------------------------------------------------------------------------------
Step 1: Setting Up the Project
Install Angular CLI
 First, make sure you have Angular CLI installed. If not, run the following command:

 npm install -g @angular/cli


Create a New Angular Project Create a new Angular project:

 ng new real-time-chat
cd real-time-chat


Install Dependencies We need to install some dependencies:


Socket.IO-client: For real-time WebSocket communication.
NgRx: For state management.
Angular Service Worker: For offline support and push notifications.
Run the following command to install these dependencies:

 npm install @ngrx/store @ngrx/effects socket.io-client @angular/service-worker

npm install ngx-socket-io
Install Socket.IO on the Server We also need to set up a server for WebSocket communication. We'll be using a basic Node.js server with Socket.IO to handle real-time communication.


Step 2: Setting Up the Node.js WebSocket Server
Set Up the Node.js Server

 Create a server folder inside your project and initialize it:

 mkdir server
cd server
npm init -y
npm install express socket.io


Create server.js Create a file server.js inside the server folder and set up a simple WebSocket server with Socket.IO.

 // server/server.js
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Serve static files (Optional, if you want a front-end to serve from the same server)
app.use(express.static('public'));

// Handle socket connections
io.on('connection', (socket) => {
  console.log('A user connected');
  
  // Listen for incoming messages
  socket.on('sendMessage', (message) => {
    // Broadcast message to all users except the sender
    socket.broadcast.emit('receiveMessage', message);
  });
  
  // Notify when a user disconnects
  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});

server.listen(3000, () => {
  console.log('Server running on port 3000');
});


Start the WebSocket Server Run the server:

 node server.js


Step 3: Implementing Angular Front-End
WebSocket Service Create a WebSocket service to handle communication between the Angular front-end and the backend WebSocket server.

 // src/app/services/websocket.service.ts
import { Injectable } from '@angular/core';
import { Socket } from 'ngx-socket-io';

@Injectable({
  providedIn: 'root'
})
export class WebsocketService {
  constructor(private socket: Socket) {}

  // Send a message
  sendMessage(message: string) {
    this.socket.emit('sendMessage', message);
  }

  // Listen for received messages
  receiveMessage() {
    return this.socket.fromEvent('receiveMessage');
  }
}


Configure Socket.IO Module in Angular In your app.module.ts, configure the SocketIoModule to connect to the WebSocket server.

 // src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';
import { AppComponent } from './app.component';
import { WebsocketService } from './services/websocket.service';

const config: SocketIoConfig = { url: 'http://localhost:3000', options: {} };

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    SocketIoModule.forRoot(config)
  ],
  providers: [WebsocketService],
  bootstrap: [AppComponent]
})
export class AppModule {}


Chat Component Create a chat.component.ts to handle the UI for sending and receiving messages.

 // src/app/components/chat/chat.component.ts
import { Component, OnInit } from '@angular/core';
import { WebsocketService } from '../../services/websocket.service';

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements OnInit {
  message: string = '';
  messages: string[] = [];
  typing: boolean = false;

  constructor(private websocketService: WebsocketService) {}

  ngOnInit(): void {
    // Listen for incoming messages
    this.websocketService.receiveMessage().subscribe((message: string) => {
      this.messages.push(message);
    });
  }

  // Send a message
  sendMessage() {
    if (this.message.trim()) {
      this.websocketService.sendMessage(this.message);
      this.messages.push(this.message);
      this.message = ''; // Clear input field
    }
  }

  // Typing indicator
  onTyping() {
    this.typing = true;
  }

  stopTyping() {
    this.typing = false;
  }
}


Chat Component Template Create the HTML template for the chat component with a simple message input field and a message display area.

 <!-- src/app/components/chat/chat.component.html -->
<div class="chat-box">
  <div class="messages">
    <div *ngFor="let msg of messages">{{ msg }}</div>
  </div>
  <input [(ngModel)]="message" (input)="onTyping()" placeholder="Type a message..." />
  <button (click)="sendMessage()">Send</button>
  <div *ngIf="typing">Typing...</div>
</div>
 Style the chat component (optional)

 /* src/app/components/chat/chat.component.css */
.chat-box {
  max-width: 600px;
  margin: auto;
  padding: 10px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
}

.messages {
  max-height: 300px;
  overflow-y: scroll;
  margin-bottom: 10px;
}

input {
  width: 80%;
  padding: 10px;
  margin-right: 10px;
}

button {
  padding: 10px 20px;
}

.typing {
  font-size: 12px;
  color: gray;
}


Push Notifications and Offline Capabilities To implement push notifications, we need to configure Angular Service Worker.

 First, enable service workers:

 ng add @angular/pwa
 Configure push notifications in the ngsw-config.json file. You can follow Angular Service Worker documentation for setting up push notifications.


Step 4: Run the Application
Run the WebSocket Server Make sure the WebSocket server is running by using the following command from the server directory:

 node server.js


Run the Angular Application Run the Angular app using:

 ng serve


Test the Application


Open http://localhost:4200 in two different browser tabs.
Send messages in one tab, and you should see them appear instantly in the other tab.
Typing indicators should appear as you type in the chat box.
If the other tab is not active, you should receive push notifications for new messages (if the service worker and push notifications are configured correctly).

Expected Output
Initial Screen: You will see a message input field, a button to send messages, and a display area for the chat messages.

 <input placeholder="Type a message..." />
<button>Send</button>
<div class="messages">
  <div>Hi, how can I help you?</div>
</div>


Real-Time Message Update: When you send a message in one tab, the message will appear instantly in all other connected tabs without page refresh. For example, if you type "Hello" in one tab, it will appear in the other tab.

 <div class="messages">
  <div>Hi, how can I help you?</div>
  <div>Hello</div>
</div>


Typing Indicator: As you start typing in the input field, a "Typing..." message will appear to notify other users that you're typing.


Conclusion
By following the steps outlined above, you have created a real-time chat application using Angular, WebSockets (via Socket.IO), and NgRx for state management. This chat application includes real-time messaging, typing indicators, and support for offline push notifications using Angular Service Workers.
You can enhance this further by adding more features like user authentication, private messaging, emojis, or even integrating Firebase or other databases for persistent message storage.


